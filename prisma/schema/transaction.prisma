model Transactions {
  id                  String          @id @default(dbgenerated("gen_random_uuid()"))
  amount              Float
  type                TransactionType
  transactionDate     DateTime        @default(now())
  tenantId            String
  rentalId            String?
  details             String?

  paymentId           String?         @unique
  refundId            String?         @unique
  expenseId           String?         @unique

  createdAt           DateTime        @default(now())
  createdBy           String?
  isDeleted           Boolean         @default(false)
  updatedAt           DateTime?       @updatedAt
  updatedBy           String?

  user                User?         @relation(fields: [createdBy], references: [username])
  payment             Payment?        @relation(fields: [paymentId], references: [id])
  refund              Refund?         @relation(fields: [refundId], references: [id])
  expense             Expense?        @relation(fields: [expenseId], references: [id])
  rental              Rental?         @relation(fields: [rentalId], references: [id])
  tenant              Tenant          @relation(fields: [tenantId], references: [id])
}   


model Payment {
  id                  String        @id @default(dbgenerated("gen_random_uuid()"))
  amount              Float
  paymentMethodId     String
  paymentTypeId       String
  tenantId            String
  rentalId            String
  notes               String?
  isDeleted           Boolean       @default(false)
  paymentDate         DateTime
  payment             String?
  payer               String?

  customerId          String?
  currencyId          String?

  createdAt           DateTime      @default(now())
  updatedAt           DateTime?     @updatedAt
  updatedBy           String?
  
  currency            Currency?     @relation(fields: [currencyId], references: [id])
  customer            Customer?     @relation(fields: [customerId], references: [id])
  paymentMethod       PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentType         PaymentType   @relation(fields: [paymentTypeId], references: [id])
  rental              Rental        @relation(fields: [rentalId], references: [id])
  tenant              Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  transaction         Transactions?
}



model Refund {
  id                  String        @id @default(dbgenerated("gen_random_uuid()"))
  amount              Float
  tenantId            String
  rentalId            String?
  reason              String?
  refundDate          DateTime      @default(now())
  customerId          String?
  refund              String?
  payee               String?

  isDeleted           Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime?     @updatedAt
  createdBy           String?


  customer            Customer?     @relation(fields: [customerId], references: [id])
  rental              Rental?       @relation(fields: [rentalId], references: [id])
  tenant              Tenant        @relation(fields: [tenantId], references: [id])
  transaction         Transactions?
}

model Expense {
  id                  String    @id @default(dbgenerated("gen_random_uuid()"))
  tenantId            String
  vehicleId           String?
  vendorId            String?
  amount              Float
  expenseDate         DateTime
  notes               String?
  maintenanceId       String?
  payee               String?
  expense             String? 
      
  isDeleted           Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
  createdBy           String?
        
  vehicle             Vehicle?         @relation(fields: [vehicleId], references: [id])
  vendor              TenantVendor?   @relation(fields: [vendorId], references: [id])
  tenant              Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user                User?           @relation(fields: [createdBy], references: [username])
  maintenance         VehicleMaintenance? @relation(fields: [maintenanceId], references: [id])

  Transactions        Transactions[]
}