model Service {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  service       String
  description   String
  icon          String?

  TenantService TenantService[]
}

model ChargeType {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  chargeType   String
  unit         String

  VehicleGroup VehicleGroup[]
}

model VehicleBrand {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  brand         String

  vehicle       Vehicle[]
  models        VehicleModel[]
}

model VehicleModel {
  id        String       @id @default(dbgenerated("gen_random_uuid()"))
  model     String
  brandId   String
  typeId    String?

  vehicles  Vehicle[]

  brand      VehicleBrand  @relation(fields: [brandId], references: [id])
  bodyType  VehicleBodyType? @relation(fields: [typeId], references: [id])
}

model VehicleBodyType {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  bodyType     String

  models       VehicleModel[]
}

model VehicleStatus {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  status    String

  vehicles  Vehicle[]
}

model FuelType {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  fuel      String

  Vehicle   Vehicle[]
}

model Transmission {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  transmission String
  transmissionCode String?

  vehicles     Vehicle[]
}

model VehicleFeature {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  feature   String

  vehicles  Vehicle[] @relation("VehicleToVehicleFeature")
}

model WheelDrive {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  drive     String
  code      String

  vehicles  Vehicle[]
}

model Currency {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  code      String
  currency  String?

  tenants   Tenant[]
}

model InvoiceSequence {
  id                  String    @id @default(dbgenerated("gen_random_uuid()"))
  prefix               String
  example             String

  Tenant              Tenant[]
}

model Country {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  code              String    @unique
  country           String

  addresses         Address[]
  states            State[]
  customerAddresses CustomerAddress[]
  presetLocations   PresetLocation[]
  tenantLocations   TenantLocationAddress[]
  licenseClasses    LicenseClass[]
  driverLicenses    DriverLicense[]
}

model State {
  id                    String    @id @default(dbgenerated("gen_random_uuid()"))
  countryId             String
  state                 String
  villages              Village[]

  addresses             Address[]
  customerAddresses     CustomerAddress[]
  presetLocations       PresetLocation[]
  tenantLocations       TenantLocationAddress[]

  country               Country   @relation(fields: [countryId], references: [id])
}

model Village {
  id                      String    @id @default(dbgenerated("gen_random_uuid()"))
  stateId                 String
  village                 String

  addresses               Address[]
  customerAddresses       CustomerAddress[]
  presetLocations         PresetLocation[]
  tenantLocations         TenantLocationAddress[]

  state     State     @relation(fields: [stateId], references: [id])
}

model MaintenanceService {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  service       String
  description   String

  serviceLog      VehicleServiceLog[]
  serviceSchedule VehicleServiceSchedule[]
}

model DocumentType {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  type      String

  customerDocument CustomerDocument[]
}

model PresetLocation {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  location          String
  street            String
  villageId         String
  stateId           String
  countryId         String

  country           Country?   @relation(fields: [countryId], references: [id])
  state             State?     @relation(fields: [stateId], references: [id])
  village           Village?   @relation(fields: [villageId], references: [id])
}

model LocationType {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  type              String
  isPermanent       Boolean  @default(true)

  tenantLocations TenantLocation[]
}

model Addition {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  name              String
  description       String
  price             Float
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  tenantId          String
  tenant            Tenant    @relation(fields: [tenantId], references: [id])
}

model LicenseClass {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  class         String
  name          String
  description   String
  countryId     String

  country       Country   @relation(fields: [countryId], references: [id])

  DriverLicense DriverLicense[]
}

model MessengerApp {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  app          String
  icon         String


  customerApps CustomerMessengerApp[]
}

model Equipment {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  equipment     String
  description   String
  icon          String?

  tenantEquipments TenantEquipment[]
}

model SubscriptionPlan {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  plan          String
  description   String
  priceXCD      Float
  priceUSD      Float
  priceId       String
  features      String[]

  TenantSubscription TenantSubscription[]
}

model ContactType {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  type          String

  tenantContacts TenantContact[]
}

model PaymentType {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  type          String
  description   String


  payments      Payments[]
}