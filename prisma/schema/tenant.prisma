model Tenant {
  id                  String                @id @default(dbgenerated("gen_random_uuid()"))
  tenantCode          String                @unique
  tenantName          String
  email               String                @unique
  number              String                @unique
  currencyId          String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  logo                String?
  setupCompleted      Boolean               @default(false)
  financialYearStart   String                @default("January")
  invoiceSequenceId   String?
  invoiceFootNotes    String                @default("")
  address             Address?
  islandWideDelivery  Boolean               @default(true)
  storefrontEnabled   Boolean               @default(true)
  subscriptionId      String?
  securityDeposit     Float                @default(0)

  subscription        TenantSubscription? 
  currency            Currency?             @relation(fields: [currencyId], references: [id])
  invoiceSequence     InvoiceSequence?      @relation(fields: [invoiceSequenceId], references: [id])

  paymentMethods      PaymentMethod[]
  users               User[]
  vehicleGroups       VehicleGroup[]       
  customers           Customer[]
  vehicles            Vehicle[]
  tenantLocations     TenantLocation[]
  additions           Addition[]
  rentals             Rental[]
  invoices            Invoice[]
  payments            Payments[]
  services            TenantService[]
  forms               Form[]
  equipment           TenantEquipment[]
  insurance           TenantInsurance[]
  rentalActivity      RentalActivity[]
  contacts            TenantContact[]
  weeklyStats         TenantWeeklyStats[]
  agreements          RentalAgreement[]
  monthlyStats        TenantMonthlyStats[]
  monthlyRentalStats  TenantMonthlyRentalStats[]
  reminders           TenantReminders[]
}



model PaymentMethod {
  id                  String                @id @default(dbgenerated("gen_random_uuid()"))
  method              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt

  Tenant              Tenant[]
  payments            Payments[]
}

model Address {
  id                  String    @id @default(dbgenerated("gen_random_uuid()"))
  street              String
  zipCode             String
  countryId           String
  tenantId            String    @unique
  stateId             String
  villageId           String

  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt

  country             Country   @relation(fields: [countryId], references: [id])
  state               State     @relation(fields: [stateId], references: [id])
  tenant              Tenant    @relation(fields: [tenantId], references: [id])
  village             Village   @relation(fields: [villageId], references: [id])
}

model TenantLocation {
  id                  String    @id @default(dbgenerated("gen_random_uuid()"))
  location            String
  pickupEnabled       Boolean
  returnEnabled       Boolean
  deliveryFee         Float
  collectionFee       Float
  tenantId            String
  minimumRentalPeriod Int      @default(1)
  isDeleted           Boolean  @default(false)
  updatedBy           String?
  updatedAt           DateTime? @updatedAt

  RentalPickup        Rental[] @relation("PickupLocation")
  RentalReturn        Rental[] @relation("ReturnLocation")
  vehicles            Vehicle[]
  tenant              Tenant    @relation(fields: [tenantId], references: [id])
}


model TenantInsurance {
  id               String    @id @default(dbgenerated("gen_random_uuid()"))
  insurance        String
  description      String
  pricePolicy      PricePolicy
  price            Float
  tenantId         String
  isActive         Boolean  @default(true)
  isDeleted        Boolean  @default(false)

  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  updatedBy        String?

  tenant           Tenant      @relation(fields: [tenantId], references: [id])
}

model TenantEquipment {
  id               String    @id @default(dbgenerated("gen_random_uuid()"))
  equipmentId      String
  pricePolicy      PricePolicy
  price            Float
  tenantId         String
  isActive         Boolean  @default(true)
  isDeleted        Boolean  @default(false)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  updatedBy         String?

  equipment        Equipment   @relation(fields: [equipmentId], references: [id])
  tenant           Tenant      @relation(fields: [tenantId], references: [id])
}

model TenantService {
  id                    String          @id @default(dbgenerated("gen_random_uuid()"))
  serviceId             String
  tenantId              String
  price                 Float     
  pricePolicy           PricePolicy    
  isActive              Boolean   @default(false)
  isDeleted             Boolean   @default(false)

  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
  updatedBy             String?

  service               Service   @relation(fields: [serviceId], references: [id])
  tenant                Tenant    @relation(fields: [tenantId], references: [id])
}

model TenantSubscription {
  id                  String    @id @default(dbgenerated("gen_random_uuid()"))
  tenantId            String    @unique
  paddleCustomerId    String    @unique
  planId              String?
  status              SubscriptionStatus @default(TRIAL)
  startDate           DateTime?
  endDate             DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt

  plan                SubscriptionPlan? @relation(fields: [planId], references: [id])
  tenant              Tenant @relation(fields: [tenantId], references: [id])
}

model TenantContact {
  id                  String    @id @default(dbgenerated("gen_random_uuid()"))
  name                String
  email               String
  phone               String
  tenantId            String
  contactTypeId       String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt

  serviceLog          VehicleServiceLog[]


  tenant              Tenant    @relation(fields: [tenantId], references: [id])
  contactType         ContactType @relation(fields: [contactTypeId], references: [id])

}

model TenantReminders {
  id                  String    @id @default(dbgenerated("gen_random_uuid()"))
  reminder            String
  date                DateTime
  tenantId            String
  completed           Boolean  @default(false)
  completedAt         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
  updatedBy           String?

  tenant              Tenant    @relation(fields: [tenantId], references: [id])
}