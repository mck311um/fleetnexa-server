model Tenant {
  id                   String                     @id @default(dbgenerated("gen_random_uuid()"))
  tenantCode           String                     @unique
  tenantName           String
  email                String                     @unique
  number               String                     @unique
  currencyId           String?
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime?                  @updatedAt
  logo                 String?
  setupCompleted       Boolean                    @default(false)
  financialYearStart    String                     @default("January")
  invoiceSequenceId    String?
  invoiceFootNotes     String                     @default("")
  storefrontEnabled    Boolean                    @default(false)
  subscriptionId       String?
  securityDeposit      Float                      @default(0)
  rating               Float                      @default(0)
  description          String?                    @default("")
  cancellationPolicyId String?                    @unique
  latePolicyId         String?                    @unique
  additionalDriverFee  Float                      @default(0)
  daysInMonth          Int                        @default(28)
  slug                 String?                    @unique
  emailVerified         Boolean                    @default(false)
  businessVerified     Boolean                    @default(false)
  merchantId           String?
  address              Address?
  customers            Customer[]
  customerViolations   CustomerViolation[]
  forms                Form[]
  invoices             Invoice[]
  payments             Payment[]
  refunds              Refund[]
  rentals              Rental[]
  rentalActivity       RentalActivity[]
  agreements           RentalAgreement[]
  charges              RentalCharge[]
  merchant             ShopDMMerchant?
  cancellationPolicy   CancellationPolicy?        @relation(fields: [cancellationPolicyId], references: [id], onDelete: Cascade)
  currency             Currency?                  @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  invoiceSequence      InvoiceSequence?           @relation(fields: [invoiceSequenceId], references: [id], onDelete: Cascade)
  latePolicy           LatePolicy?                @relation(fields: [latePolicyId], references: [id], onDelete: Cascade)
  contacts             TenantContact[]
  currencyRates        TenantCurrencyRate[]
  equipment            TenantEquipment[]
  insurance            TenantInsurance[]
  tenantLocations      TenantLocation[]
  monthlyRentalStats   TenantMonthlyRentalStats[]
  monthlyStats         TenantMonthlyStats[]
  notifications         TenantNotification[]
  ratings              TenantRatings[]
  reminders            TenantReminders[]
  services             TenantService[]
  subscription         TenantSubscription?
  violations           TenantViolation[]
  weeklyStats          TenantWeeklyStats[]
  yearlyStats          TenantYearlyStats[]
  transactions         Transactions[]
  users                User[]
  userRoles            UserRole[]
  vehicles             Vehicle[]
  paymentMethods       PaymentMethod[]            @relation("PaymentMethodToTenant")
  emailTokens          EmailVerification[]
  vendors              TenantVendor[]
  maintenance          VehicleMaintenance[]
}

model EmailVerification {
  id                    String   @id @default(dbgenerated("gen_random_uuid()"))
  email                 String
  token                 String   @unique
  createdAt             DateTime @default(now())
  expiresAt             DateTime
  verified               Boolean  @default(false)
  tenantId              String
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([email])
}

model PaymentMethod {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  method    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  payments  Payment[]
  tenant    Tenant[]  @relation("PaymentMethodToTenant")
}

model Address {
  id                  String      @id @default(dbgenerated("gen_random_uuid()"))
  street              String?
  countryId           String?
  tenantId            String      @unique
  stateId             String?
  villageId           String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime?   @updatedAt
  country             Country?    @relation(fields: [countryId], references: [id])
  state               State?      @relation(fields: [stateId], references: [id])
  tenant              Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  village             Village?    @relation(fields: [villageId], references: [id])
}

model TenantLocation {
  id                  String    @id @default(dbgenerated("gen_random_uuid()"))
  location            String
  pickupEnabled       Boolean
  returnEnabled       Boolean
  deliveryFee         Float
  collectionFee       Float
  tenantId            String
  minimumRentalPeriod Int       @default(1)
  isDeleted           Boolean   @default(false)
  updatedAt           DateTime? @updatedAt
  updatedBy           String?
  storefrontEnabled   Boolean   @default(false)
  createdAt           DateTime  @default(now())
  pickups             Rental[]  @relation("PickupLocation")
  returns             Rental[]  @relation("ReturnLocation")
  tenant              Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicles            Vehicle[]
}

model TenantInsurance {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  insurance   String
  description String
  pricePolicy PricePolicy
  price       Float
  tenantId    String
  isActive    Boolean     @default(true)
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  updatedBy   String?
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model TenantEquipment {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  equipmentId String
  pricePolicy PricePolicy
  price       Float
  tenantId    String
  isActive    Boolean     @default(true)
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  updatedBy   String?
  equipment   Equipment   @relation(fields: [equipmentId], references: [id])
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model TenantService {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  serviceId   String
  tenantId    String
  price       Float
  pricePolicy PricePolicy
  isActive    Boolean     @default(false)
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  updatedBy   String?
  service     Service     @relation(fields: [serviceId], references: [id])
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model TenantSubscription {
  id             String                @id @default(dbgenerated("gen_random_uuid()"))
  tenantId       String                @unique
  status         SubscriptionStatus    @default(TRIAL)
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime?             @updatedAt
  dodoCustomerId String                @unique
  productId      String?
  payments       SubscriptionPayment[]
  plan           SubscriptionPlan?     @relation(fields: [productId], references: [productId])
  tenant         Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model TenantContact {
  id            String              @id @default(dbgenerated("gen_random_uuid()"))
  name          String
  email         String
  phone         String
  tenantId      String
  contactTypeId String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime?           @updatedAt
  contactType   ContactType         @relation(fields: [contactTypeId], references: [id])
  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  serviceLog    VehicleServiceLog[]
}

model TenantReminders {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  reminder    String
  date        DateTime
  tenantId    String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  updatedBy   String?
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model TenantNotification {
  id        String               @id @default(dbgenerated("gen_random_uuid()"))
  title     String
  type      NotificationType
  priority  NotificationPriority
  message   String
  tenantId  String
  actionUrl String?
  read      Boolean              @default(false)
  createdAt DateTime             @default(now())
  isDeleted Boolean              @default(false)
  tenant    Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model CancellationPolicy {
  id                 String  @id @default(dbgenerated("gen_random_uuid()"))
  minimumDays        Int
  policy             String
  amount             Float
  tenantId           String  @unique
  updatedBy          String?
  bookingMinimumDays Int
  tenant             Tenant?
}

model LatePolicy {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))
  amount    Float
  maxHours  Int
  updatedBy String?
  tenantId  String  @unique
  tenant    Tenant?
}

model TenantViolation {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  violation          String              @unique
  tenantId           String
  description        String?
  amount             Float               @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  isDeleted          Boolean             @default(false)
  deletedAt          DateTime?
  customerViolations CustomerViolation[]
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model TenantVendor {
  id                  String    @id @default(dbgenerated("gen_random_uuid()"))
  vendor              String
  contactName         String?
  phone               String?
  email               String?
  tenantId            String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
  updatedBy           String?
  deletedAt           DateTime?
  isDeleted           Boolean   @default(false)

  tenant              Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  vehicleMaintenance  VehicleMaintenance[]
}