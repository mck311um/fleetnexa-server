model Payments {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  amount            Float
  paymentMethodId   String
  paymentTypeId     String
  tenantId          String
  rentalId          String
  notes             String?
  isRefunded        Boolean  @default(false)
  isDeleted         Boolean  @default(false)
  paymentDate       DateTime

  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  updatedBy         String?

  paymentType       PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentMethod     PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  rental            Rental   @relation(fields: [rentalId], references: [id])
  

  transactions Transactions[]
}

model Transactions {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  amount            Float
  type              TransactionType
  tenantId          String
  transactionDate   DateTime  @default(now())
  customerId        String?
  isDeleted         Boolean  @default(false)
  createdBy         String?
  createdAt         DateTime  @default(now())
  paymentId         String?

  customer         Customer? @relation(fields: [customerId], references: [id])
  tenant           Tenant   @relation(fields: [tenantId], references: [id])
  payment          Payments? @relation(fields: [paymentId], references: [id])
  user             User?    @relation(fields: [createdBy], references: [id])
}
