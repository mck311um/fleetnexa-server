model Vehicle {
  id                 String                   @id @default(dbgenerated("gen_random_uuid()"))
  year               Int
  color              String
  licensePlate       String                   @unique
  engineVolume       Int
  vehicleStatusId    String
  fuelTypeId         String
  transmissionId     String
  wheelDriveId       String
  fuelLevel          Int
  odometer           Int
  steering           String                   @default("left")
  featuredImage      String
  images             String[]
  numberOfSeats      Int
  numberOfDoors      Int
  vin                String
  brandId            String
  modelId            String
  tenantId           String?
  locationId         String?
  isActive           Boolean                  @default(false)
  isDeleted          Boolean                  @default(false)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime?                @updatedAt
  createdBy          String?
  updatedBy          String?
  drivingExperience  Int                      @default(1)
  fuelPolicyId       String?
  minimumAge         Int
  minimumRental      Int
  refundAmount       Int                      @default(100)
  timeBetweenRentals Int
  dayPrice           Float                    @default(0)
  monthPrice         Float                    @default(0)
  weekPrice          Float                    @default(0)
  storefrontEnabled  Boolean                  @default(true)


  rentals            Rental[]
  rentalActivity     RentalActivity[]
  brand              VehicleBrand             @relation(fields: [brandId], references: [id])
  fuelPolicy         FuelPolicy?              @relation(fields: [fuelPolicyId], references: [id])
  fuelType           FuelType                 @relation(fields: [fuelTypeId], references: [id])
  location           TenantLocation?          @relation(fields: [locationId], references: [id])
  model              VehicleModel             @relation(fields: [modelId], references: [id])
  tenant             Tenant?                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  transmission       Transmission             @relation(fields: [transmissionId], references: [id])
  vehicleStatus      VehicleStatus            @relation(fields: [vehicleStatusId], references: [id])
  wheelDrive         WheelDrive               @relation(fields: [wheelDriveId], references: [id])
  damages            VehicleDamage[]
  discounts          VehicleDiscount[]
  serviceLogs        VehicleServiceLog[]
  scheduledServices  VehicleServiceSchedule[]
  features           VehicleFeature[]         @relation("VehicleToVehicleFeature")
  scheduledMaintenance VehicleMaintenance[]
  expenses            Expense[]
}

model VehicleDiscount {
  id             String    @id @default(dbgenerated("gen_random_uuid()"))
  amount         Decimal   @db.Decimal(10, 2)
  discountPolicy String
  periodMax      Int
  periodMin      Int
  isActive       Boolean   @default(false)
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  createdBy      String?
  updatedBy      String?
  vehicleId      String
  vehicle        Vehicle   @relation(fields: [vehicleId], references: [id])
}

model VehicleDamage {
  id                  String              @id @default(dbgenerated("gen_random_uuid()"))
  description         String?
  title               String
  isRepaired          Boolean
  severity            Severity            @default(MINOR)
  location            DamageLocation      @default(EXTERIOR)
  estimatedRepairCost Float?
  images              String[]
  partId              String
  vehicleId           String
  repairedAt          DateTime?
  customerId          String?
  isActive            Boolean             @default(false)
  isDeleted           Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime?           @updatedAt
  createdBy           String?
  updatedBy           String?
  customer            Customer?           @relation(fields: [customerId], references: [id])
  vehicle             Vehicle             @relation(fields: [vehicleId], references: [id])
  serviceLogs         VehicleServiceLog[]
}

model VehiclePart {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  partName  String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model FuelPolicy {
  id       String    @id @default(dbgenerated("gen_random_uuid()"))
  policy   String
  code     String
  vehicles Vehicle[]
}

model VehicleServiceLog {
  id                 String                  @id @default(dbgenerated("gen_random_uuid()"))
  vehicleId          String
  serviceId          String
  servicedAt         DateTime
  notes              String?
  contactId          String?
  createdAt          DateTime                @default(now())
  updatedAt          DateTime?               @updatedAt
  updatedBy          String?
  scheduledServiceId String?
  damageId           String?
  cost               Float?
  documents          String[]
  contact            TenantContact?          @relation(fields: [contactId], references: [id])
  damage             VehicleDamage?          @relation(fields: [damageId], references: [id])
  scheduledService   VehicleServiceSchedule? @relation("ScheduleToLogs", fields: [scheduledServiceId], references: [id])
  maintenanceService MaintenanceService      @relation(fields: [serviceId], references: [id])
  vehicle            Vehicle                 @relation(fields: [vehicleId], references: [id])
}

model VehicleMaintenance {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  vehicleId          String
  vendorId           String?
  startDate          DateTime
  endDate            DateTime
  cost               Float
  status             MaintenanceStatus   @default(SCHEDULED)
  isDeleted          Boolean             @default(false)
  tenantId           String?
 
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  createdBy          String?
  updatedBy          String?
  expenses           Expense[]

  vehicle            Vehicle             @relation(fields: [vehicleId], references: [id])
  vendor             TenantVendor?       @relation(fields: [vendorId], references: [id])
  tenant             Tenant?             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  services           MaintenanceService[]  @relation("MaintenanceToServices")
}



model VehicleServiceSchedule {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  vehicleId          String
  serviceId          String
  scheduledDate      DateTime
  isCompleted        Boolean             @default(false)

  serviceLogs        VehicleServiceLog[] @relation("ScheduleToLogs")
  maintenanceService MaintenanceService  @relation(fields: [serviceId], references: [id])
  vehicle            Vehicle             @relation(fields: [vehicleId], references: [id])
}
