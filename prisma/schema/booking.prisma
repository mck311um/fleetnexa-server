model Booking {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  startDate         DateTime
  endDate           DateTime
  pickupLocationId  String
  returnLocationId  String
  vehicleId         String
  customerId        String
  agent             Agent
  signature         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  vehicleGroupId    String
  tenantId          String
  status            BookingStatus @default(PENDING)
  createdBy         String?
  updatedBy         String?
  notes             String?
  isDeleted         Boolean  @default(false)

  values            Values?
  invoice           Invoice?

  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  pickup            TenantLocation @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  return            TenantLocation @relation("ReturnLocation", fields: [returnLocationId], references: [id])
  vehicle           Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleGroup      VehicleGroup   @relation(fields: [vehicleGroupId], references: [id])
  customer          Customer   @relation(fields: [customerId], references: [id])


  user             User?     @relation(fields: [createdBy], references: [id])

  rentalActivity RentalActivity[]
}

model Payments {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  amount            Float
  paymentMethodId   String
  invoiceId         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  tenantId          String
  status            String    @default("pending")
  createdBy         String?
  updatedBy         String?

  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  invoice           Invoice   @relation(fields: [invoiceId], references: [id])
}

model Invoice {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  invoiceNumber     String
  amount            Float
  bookingId         String @unique
  tenantId          String
  customerId        String
  status            String    @default("pending")
  payments          Payments[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  createdBy         String?
  updatedBy         String?

  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  booking           Booking   @relation(fields: [bookingId], references: [id])
  customer          Customer   @relation(fields: [customerId], references: [id])
}

model Values {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  numberOfDays      Int
  basePrice         Float
  totalCost         Float
  discount          Float
  deliveryFee       Float
  collectionFee     Float
  deposit           Float
  totalExtras       Float
  subTotal          Float
  netTotal          Float
  bookingId         String  @unique
  discountMin       Int
  discountMax       Int
  discountAmount    Float
  discountPolicy    String

  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  booking          Booking   @relation(fields: [bookingId], references: [id])

  extras           BookingExtras[]
} 

model BookingExtras {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  extraId           String
  amount            Float
  valuesId          String

  values            Values   @relation(fields: [valuesId], references: [id])
  
}