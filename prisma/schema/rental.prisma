model Rental {
  id                String             @id @default(dbgenerated("gen_random_uuid()"))
  rentalNumber      String?
  startDate         DateTime
  endDate           DateTime
  pickupLocationId  String
  returnLocationId  String
  vehicleId         String
  agent             Agent
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?          @updatedAt
  tenantId          String
  status            RentalStatus       @default(PENDING)
  createdBy         String?
  updatedBy         String?
  notes             String?
  isDeleted         Boolean            @default(false)
  chargeTypeId      String?
  bookingCode       String?            @unique
  deletedAt         DateTime?
  invoice           Invoice?
  payments          Payment[]
  refunds           Refund[]
  chargeType        ChargeType?        @relation(fields: [chargeTypeId], references: [id])
  user              User?              @relation(fields: [createdBy], references: [id])
  pickup            TenantLocation     @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  return            TenantLocation     @relation("ReturnLocation", fields: [returnLocationId], references: [id])
  tenant            Tenant             @relation(fields: [tenantId], references: [id])
  vehicle           Vehicle            @relation(fields: [vehicleId], references: [id])
  rentalActivity    RentalActivity[]
  agreement         RentalAgreement?
  charges           RentalCharge[]
  drivers           RentalDriver[]
  storefrontBooking StorefrontBooking?
  transactions      Transactions[]
  values            Values?
}

model StorefrontBooking {
  id        String         @id @default(dbgenerated("gen_random_uuid()"))
  rentalId  String         @unique
  userId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
  rental    Rental         @relation(fields: [rentalId], references: [id])
  user      StorefrontUser @relation(fields: [userId], references: [id])
}

model RentalDriver {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  rentalId  String
  driverId  String
  isPrimary Boolean  @default(false)
  customer  Customer @relation(fields: [driverId], references: [id])
  rental    Rental   @relation(fields: [rentalId], references: [id])

  @@unique([rentalId, driverId], name: "rentalId_driverId")
}

model Invoice {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  invoiceNumber String
  amount        Float
  rentalId      String    @unique
  tenantId      String
  customerId    String
  status        String    @default("pending")
  invoiceUrl    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  createdBy     String?
  updatedBy     String?
  customer      Customer  @relation(fields: [customerId], references: [id])
  rental        Rental    @relation(fields: [rentalId], references: [id])
  tenant        Tenant    @relation(fields: [tenantId], references: [id])
}

model RentalAgreement {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  number       String
  rentalId     String    @unique
  tenantId     String
  customerId   String
  agreementUrl String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  createdBy    String?
  updatedBy    String?
  signableUrl  String?
  customer     Customer  @relation(fields: [customerId], references: [id])
  rental       Rental    @relation(fields: [rentalId], references: [id])
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
}

model Values {
  id                   String        @id @default(dbgenerated("gen_random_uuid()"))
  numberOfDays         Int
  basePrice            Float
  totalCost            Float
  discount             Float
  deliveryFee          Float
  collectionFee        Float
  deposit              Float
  totalExtras          Float
  subTotal             Float
  netTotal             Float
  rentalId             String        @unique
  discountMin          Int
  discountMax          Int
  discountAmount       Float
  discountPolicy       String
  createdAt            DateTime      @default(now())
  updatedAt            DateTime?     @updatedAt
  additionalDriverFees Float         @default(0.0)
  cancellationFee      Float         @default(0.0)
  lateFee              Float         @default(0.0)
  customBasePrice      Boolean       @default(false)
  customCollectionFee  Boolean       @default(false)
  customDeliveryFee    Boolean       @default(false)
  customDeposit        Boolean       @default(false)
  customDiscount       Boolean       @default(false)
  customTotalCost      Boolean       @default(false)
  extras               RentalExtra[]
  rental               Rental        @relation(fields: [rentalId], references: [id])
}

model RentalExtra {
  id           String  @id @default(dbgenerated("gen_random_uuid()"))
  extraId      String
  amount       Float
  valuesId     String
  customAmount Boolean @default(false)
  values       Values  @relation(fields: [valuesId], references: [id])
}

model RentalCharge {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  rentalId   String
  charge     String
  reason     String?
  amount     Float
  customerId String
  tenantId   String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  rental     Rental   @relation(fields: [rentalId], references: [id])
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
}
