model Rental {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  rentalNumber      String? 
  bookingCode       String?   
  startDate         DateTime
  endDate           DateTime
  pickupLocationId  String
  returnLocationId  String
  vehicleId         String
  agent             Agent
  signature         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  tenantId          String
  status            RentalStatus @default(PENDING)
  createdBy         String?
  updatedBy         String?
  notes             String?
  isDeleted         Boolean  @default(false)
  chargeTypeId      String?

  values            Values?
  invoice           Invoice?
  agreement         RentalAgreement?
  storefrontBooking StorefrontBooking?


  rentalActivity    RentalActivity[]
  payments          Payment[]
  transactions      Transactions[]
  drivers           RentalDriver[]
  refunds           Refund[]
  charges           RentalCharge[]


  tenant            Tenant          @relation(fields: [tenantId], references: [id])
  pickup            TenantLocation  @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  return            TenantLocation  @relation("ReturnLocation", fields: [returnLocationId], references: [id])
  vehicle           Vehicle         @relation(fields: [vehicleId], references: [id])
  user              User?           @relation(fields: [createdBy], references: [id])
  chargeType        ChargeType?     @relation(fields: [chargeTypeId], references: [id])


}

model StorefrontBooking {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  rentalId          String    @unique
  userId            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  rental            Rental   @relation(fields: [rentalId], references: [id])
  user              StorefrontUser     @relation(fields: [userId], references: [id])
}


model RentalDriver {
  id                String     @id @default(dbgenerated("gen_random_uuid()"))
  rentalId          String
  driverId          String
  primaryDriver     Boolean    @default(false)

  rental            Rental     @relation(fields: [rentalId], references: [id])
  driver            Customer   @relation(fields: [driverId], references: [id])  

  @@unique([rentalId, driverId], name: "rentalId_driverId")
}


model Invoice {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  invoiceNumber     String
  amount            Float
  rentalId          String @unique
  tenantId          String
  customerId        String
  status            String    @default("pending")
  invoiceUrl        String?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  createdBy         String?
  updatedBy         String?

  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  rental            Rental   @relation(fields: [rentalId], references: [id])
  customer          Customer   @relation(fields: [customerId], references: [id])
}


model RentalAgreement {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  number            String
  rentalId          String    @unique
  tenantId          String
  customerId        String
  agreementUrl      String?
  signableUrl       String?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  createdBy         String?
  updatedBy         String?

  tenant            Tenant    @relation(fields: [tenantId], references: [id])
  rental            Rental   @relation(fields: [rentalId], references: [id])
  customer          Customer   @relation(fields: [customerId], references: [id])
}


model Values {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  numberOfDays      Int
  basePrice         Float
  customBasePrice   Boolean @default(false)
  totalCost         Float
  customTotalCost   Boolean @default(false)
  discount          Float
  customDiscount    Boolean @default(false)
  deliveryFee       Float
  customDeliveryFee Boolean @default(false)
  collectionFee     Float
  customCollectionFee Boolean @default(false)
  deposit           Float
  customDeposit     Boolean @default(false)
  totalExtras       Float
  subTotal          Float
  netTotal          Float
  rentalId          String  @unique
  discountMin       Int
  discountMax       Int
  discountAmount    Float
  discountPolicy    String
  additionalDriverFees Float @default(0.0)
  cancellationFee      Float @default(0.0)
  lateFee              Float @default(0.0)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  rental            Rental   @relation(fields: [rentalId], references: [id])
  extras            RentalExtra[]
} 

model RentalExtra{
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  extraId           String
  amount            Float
  customAmount      Boolean @default(false)
  valuesId          String

  values            Values   @relation(fields: [valuesId], references: [id])
  
}

model RentalCharge {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  rentalId          String
  charge            String
  reason            String?
  amount            Float
  tenantId          String
  customerId        String
  createdAt         DateTime  @default(now())

  rental            Rental   @relation(fields: [rentalId], references: [id])
  tenant            Tenant   @relation(fields: [tenantId], references: [id])
  customer          Customer @relation(fields: [customerId], references: [id])
}